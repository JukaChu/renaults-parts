const MODAL_OPEN_CLASS = 'visible';

var allLazyLoad = [...document.querySelectorAll('.lazyload')];

function allLozadImg() {
    allLazyLoad.forEach((el) => {
        var observer = lozad(el); // passing a `NodeList` (e.g. `document.querySelectorAll()`) is also valid
        observer.observe();
        el.addEventListener('load', () => {
            el.classList.add('is-loaded')
        })
        // if (el.loaded()) {
        //     el.classList.add('is-loaded');
        // }
    })
}

allLozadImg();


//catalog btn

let catalogBtn = [...document.querySelectorAll('.catalog-btn')];

function catalogControl() {
    if (catalogBtn.length) {
        catalogBtn.forEach((btn) => {
            btn.addEventListener('click', () => {
                btn.closest('.catalog-cont').classList.toggle('open');
            })
        })
    }
}

catalogControl();

//catalog btn

//custom select

$(document).ready(function () {
    if (document.querySelector('.select-cont select')) {
        $('.select-cont select').niceSelect();
    }

});

//custom select

//account btn

let accountBtn = [...document.querySelectorAll('.account .acc')];

function accountBlock() {
    if (accountBtn.length) {
        accountBtn.forEach((btn) => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                e.preventDefault();
                btn.closest('.account').classList.toggle('open');
            })
        })
    }
}

accountBlock();

//account btn
//anim

//add counting number to show delay speed
var counterContainer = [...document.querySelectorAll('.counting-delay')];

function addCoutingDelay() {
    if (counterContainer.length) {
        counterContainer.forEach((cont) => {
            var anims = [...cont.querySelectorAll('.anim')];
            anims.forEach((btn, k) => {
                btn.dataset.animDelay = k * 100;
            })
        })
    }
}

addCoutingDelay();


var animStage = [...document.querySelectorAll('.anim-stage')];

function scrollAnimationsStage() {
    if (animStage.length) {
        var animItems = [...document.querySelectorAll(':scope > *')];

        var observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                // console.log(entry.target);
                var eles = [...entry.target.querySelectorAll(":scope > *")];
                var len = eles.length;

                // console.log(eles);
                if (entry.isIntersecting) {
                    for (var i = 0; i < len; i++) {
                        // console.log(eles[1]);
                        eles[i].style.animationDelay = (entry.target.dataset.animDelay * i) + 'ms';
                        eles[i].style.animationDuration = entry.target.dataset.animDuration + 'ms';
                        eles[i].style.animationName = entry.target.dataset.anim;
                    }
                    observer.unobserve(entry.target);
                }

            })
        }, {threshold: .5})

        animStage.forEach((animate, k) => {
            observer.observe(animate);
        })

    }
}

scrollAnimationsStage();

// scroll animations
var anim = document.querySelectorAll('.anim')

function scrollAnimations() {
    if (anim.length) {
        var observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                var el = entry.target
                if (entry.isIntersecting) {
                    if (el.classList.contains('anim-js')) {

                    } else {
                        el.style.animationDelay = el.dataset.animDelay + 'ms';
                        el.style.animationDuration = el.dataset.animDuration + 'ms';
                        el.style.animationName = el.dataset.anim;
                    }


                    el.classList.add('done');
                    observer.unobserve(entry.target);
                }

            })
        }, {threshold: .5});
        if (window.innerWidth > 991) {
            anim.forEach(animate => {
                observer.observe(animate)
            })
        } else {
            anim.forEach(animate => {
                observer.observe(animate)
            })
        }
    }
}

scrollAnimations();

//

//anim


var burger = [...document.querySelectorAll('.burger')];
var header = document.querySelector('.header');

function burgerControl() {
    if (burger.length) {
        burger.forEach((btn) => {

            btn.addEventListener('click', () => {
                btn.classList.toggle('active');
                header.classList.toggle('active');
                // backdrop.classList.toggle('active');
                document.body.classList.toggle('no-scroll')

            })
        })
    }
}

burgerControl();

//chars hovering


let productsGroup = [...document.querySelectorAll('.products-group')];

function startProductGroup() {
    if (!productsGroup.length) {

    } else {


        productsGroup.forEach((sld) => {
            let sldCont = sld.querySelector('.swiper');
            let sldNext = sld.querySelector('.slider-btn--next');
            let sldPrev = sld.querySelector('.slider-btn--prev');

            const swiper2 = new Swiper(sldCont, {
                // Optional parameters
                loop: false,
                slidesPerView: 1,
                slidesPerGroup: 1,
                speed: 600,
                centeredSlides: false,
                navigation: {
                    nextEl: sldNext,
                    prevEl: sldPrev,
                },
                autoplay: false,
                spaceBetween: 20,
                breakpoints: {
                    1050: {
                        slidesPerView: 5,
                        spaceBetween: 40,
                    },
                    850: {
                        slidesPerView: 4,
                        spaceBetween: 30,
                    },
                    650: {
                        slidesPerView: 3,
                        spaceBetween: 20,
                    },
                }


            });


        })

    }
}

startProductGroup();


let newsGroup = [...document.querySelectorAll('.news-section__cont')];

function startNewsGroup() {
    if (!newsGroup.length) {

    } else {


        newsGroup.forEach((sld) => {
            let sldCont = sld.querySelector('.swiper');
            let sldNext = sld.querySelector('.slider-btn--next');
            let sldPrev = sld.querySelector('.slider-btn--prev');

            const swiper2 = new Swiper(sldCont, {
                // Optional parameters
                loop: false,
                slidesPerView: 1,
                slidesPerGroup: 1,
                speed: 600,
                centeredSlides: false,
                navigation: {
                    nextEl: sldNext,
                    prevEl: sldPrev,
                },
                autoplay: false,
                spaceBetween: 23,
                breakpoints: {
                    1050: {
                        slidesPerView: 4,
                        spaceBetween: 32,
                    },
                    850: {
                        slidesPerView: 3,
                        spaceBetween: 30,
                    },
                    650: {
                        slidesPerView: 2,
                        spaceBetween: 20,
                    },
                }


            });


        })

    }
}

startNewsGroup();

let productGallery = [...document.querySelectorAll('.product-gallery')];

function startGallery() {
    if (!productGallery.length) {

    } else {


        productGallery.forEach((sld) => {
            let sldCont = sld.querySelector('.swiper');
            let sldNext = sld.querySelector('.slider-btn--next');
            let sldPrev = sld.querySelector('.slider-btn--prev');
            let pagin = sld.querySelector('.dots');

            const swiper2 = new Swiper(sldCont, {
                // Optional parameters
                loop: false,
                slidesPerView: 1,
                slidesPerGroup: 1,
                speed: 600,
                centeredSlides: false,
                navigation: {
                    nextEl: sldNext,
                    prevEl: sldPrev,
                },
                autoplay: false,
                spaceBetween: 23,

                pagination: {
                    el: pagin,
                    type: 'bullets',
                    bulletActiveClass: 'active',
                    bulletClass: 'single-dot',
                    bulletElement: 'div',
                    clickable: true,
                    currentClass: 'current',
                    spaceBetween: 2,
                },


            });


        })

    }
}

startGallery();

//modal windows

//modal window

let btnMod = [...document.querySelectorAll('.btn-mod')];
let modals = [...document.querySelectorAll('.modal-window')];
let closeModal = [...document.querySelectorAll('.modal-close')];
let clsSecModal = [...document.querySelectorAll('.modal-window .cls')];
let backplates = [...document.querySelectorAll('.backplate')];


$('body').on('click', '#js-basket-window .modal-close', function () {
    this.closest('.modal-window').classList.remove('visible');
    document.body.classList.remove('no-scroll');
});
$('body').on('click', '#js-basket-window .backplate', function () {
    this.closest('.modal-window').classList.remove('visible');
    document.body.classList.remove('no-scroll');
});

function controlModal() {
    if (btnMod.length) {
        btnMod.forEach((btn) => {
            let data = btn.dataset.mod;

            btn.addEventListener('click', (e) => {

                //   if (window.innerWidth > 768) {
                e.preventDefault();
                e.stopPropagation();

                burger.forEach((br) => {
                    br.classList.remove('active');
                });
                header.classList.remove('active');

                if (document.querySelector('.modal-window.visible')) {
                    document.querySelector('.modal-window.visible').classList.remove('visible');
                }
                modals.forEach((mod) => {
                    if (mod.dataset.modal === data) {
                        document.body.classList.add('no-scroll');

                        mod.classList.add('visible');
                        if (mod.querySelector('.main-title')) {
                            setTimeout(() => {
                                mod.querySelector('.main-title').classList.add('done');

                            }, 500);
                        }
                        if (mod.classList.contains('modal-video')) {
                            mod.querySelector('iframe').src = btn.dataset.link;
                        }
                    }
                })
                //  }

            })
        });
        closeModal.forEach((btn) => {
            btn.addEventListener('click', () => {
                btn.closest('.modal-window').classList.remove('visible');
                document.body.classList.remove('no-scroll');
                if (btn.closest('.modal-window').querySelector('.main-title')) {

                    btn.closest('.modal-window').querySelector('.main-title').classList.remove('done');


                }
                if (btn.closest('.modal-window').classList.contains('modal-video')) {
                    btn.closest('.modal-window').querySelector('iframe').src = '';
                }
            })
        });
        backplates.forEach((btn) => {
            btn.addEventListener('click', () => {
                btn.closest('.modal-window').classList.remove('visible');
                document.body.classList.remove('no-scroll');
                if (btn.closest('.modal-window').querySelector('.main-title')) {

                    btn.closest('.modal-window').querySelector('.main-title').classList.remove('done');


                }
                if (btn.closest('.modal-window').classList.contains('modal-video')) {
                    btn.closest('.modal-window').querySelector('iframe').src = '';
                }
            })
        });
        if (clsSecModal.length) {
            clsSecModal.forEach((btn) => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    btn.closest('.modal-window').classList.remove('visible');
                    document.body.classList.remove('no-scroll');

                })
            });
        }
    }
}

controlModal();

//modal windows

//rating control

let quantButton = [...document.querySelectorAll('.quantity__button')];

function upValueQuant() {
    if (!quantButton.length) {

    } else {
        quantButton.forEach((btn) => {
            btn.querySelector('button').addEventListener('click', () => {
                if (btn.classList.contains('quantity__button--minus')) {
                    let val = btn.closest('.quantity-field').querySelector('.quantity input').value;
                    if (Number(val) === 1) {

                    } else {
                        let newVal = Number(val) - 1;
                        btn.closest('.quantity-field').querySelector('.quantity input').value = newVal;

                        if (btn.closest('.checkout-item')) {
                            let price = btn.closest('.checkout-item').querySelector('.sg-p').dataset.price;
                            let fullPrice = btn.closest('.checkout-item').querySelector('.full-price strong');

                            let prc = btn.closest('.quantity-field').querySelector('.quantity input').value * price;

                            let dottedPrice = prc.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                            fullPrice.innerHTML = dottedPrice;
                        }
                    }


                } else {
                    let val = btn.closest('.quantity-field').querySelector('.quantity input').value;

                    let newVal = Number(val) + 1;
                    btn.closest('.quantity-field').querySelector('.quantity input').value = newVal;
                    if (btn.closest('.checkout-item')) {
                        let price = btn.closest('.checkout-item').querySelector('.sg-p').dataset.price;
                        let fullPrice = btn.closest('.checkout-item').querySelector('.full-price strong');

                        let prc = btn.closest('.quantity-field').querySelector('.quantity input').value * price;

                        let dottedPrice = prc.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                        fullPrice.innerHTML = dottedPrice;
                    }
                }
            })
        })
    }
}

upValueQuant();

//price change


//price change

function getRaty() {
    $('.rating-stars').each(function (index) {
        if ($(this).html() == '') {
            $(this).raty({
                readOnly: true,
                starHalf: '/img/star-full.svg',
                starOn: '/img/star-full.svg',
                starOff: '/img/star-clear.svg',
                hints: ['a', null, '', null, '', null]
            });
        }
    });
}

getRaty();


let startsRateModal = [...document.querySelectorAll('.rate .sg-rate')];

function hoverStarsRate(startsRateModal) {
    if (!startsRateModal.length) {

    } else {
        startsRateModal.forEach((st, k) => {
            let number = k + 1;
            st.addEventListener('mouseover', () => {
                st.classList.add('hover');
                for (let i = 0; i < k; i++) {
                    startsRateModal[i].classList.add('hover');
                }
            });
            st.addEventListener('mouseout', () => {
                st.classList.remove('hover');
                for (let i = 0; i < k; i++) {
                    startsRateModal[i].classList.remove('hover');
                }
            });
            st.addEventListener('click', () => {
                startsRateModal.forEach((st2) => {
                    st2.classList.remove('clicked');
                });
                st.classList.add('clicked');
                st.closest('.form-comment').querySelector('.rating-input input').value = number;
                for (let i = 0; i < k; i++) {
                    startsRateModal[i].classList.add('clicked');
                }
            })
        })
    }
}


hoverStarsRate(startsRateModal);


//rating control

//product-description

/*let prodDesc = [...document.querySelectorAll('.product-description')];

function controlProdDesc() {
   if (prodDesc.length) {
      prodDesc.forEach((btn) => {
         btn.querySelector('.opener').addEventListener('click', () => {
            btn.classList.toggle('open');
         })
      })
   }
}

controlProdDesc();*/
//product-description

//tabs

let tabBtn = [...document.querySelectorAll('.tab-btn')];

function changeTab() {
    if (!tabBtn.length) {

    } else {
        tabBtn.forEach((btn, k) => {
            btn.addEventListener('click', () => {
                if (btn.classList.contains('active')) {

                } else {
                    tabBtn.forEach((btn2) => {
                        btn2.classList.remove('active');
                    });
                    btn.classList.add('active');
                    [...btn.closest('.tab-cont').querySelectorAll('.item-tab')].forEach((tab, m) => {
                        if (m === k) {
                            tab.classList.add('active');
                        } else {
                            tab.classList.remove('active');

                        }
                    })
                }
            })
        })
    }
}

changeTab();

//tabs


//faq
let faqItems = [...document.querySelectorAll('.single-faq .faq-head')];

function controlFaq() {
    if (faqItems.length) {
        faqItems.forEach((btn) => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                btn.closest('.single-faq').classList.toggle('open');
            })
        })
    }
}

controlFaq();

//faq

//card script

let cardDetails = [...document.querySelectorAll('.card-details')];

function cardFunc() {
    if (cardDetails.length) {
        var cleave = new Cleave('.card-number', {
            creditCard: true,
            onCreditCardTypeChanged: function (type) {
            }
        });
        var cleave2 = new Cleave('.card-month', {
            date: true,
            datePattern: ['m', 'y']
        });

    }
}

cardFunc();
//card script


$('.phone-number').mask('+38 (999) - 999 - 99 - 99');


//range sliders


var inputsRange = [...document.querySelectorAll('.filter-range-inputs input')];
let stepsSlider = document.querySelector('.range-slider');
let btnAccept = document.querySelector('.btn-accept-range');


function createRangeSlider() {
    if (stepsSlider) {
        let st = stepsSlider.dataset.start;
        let nd = stepsSlider.dataset.end;
        let mn = stepsSlider.dataset.min;
        let mx = stepsSlider.dataset.max;


        noUiSlider.create(stepsSlider, {
            start: [Number(st), Number(nd)],
            connect: true,
            tooltips: false,
            format: wNumb({
                decimals: 0,
            }),
            range: {
                'min': [Number(mn)],
                'max': Number(mx)
            }
        });

        stepsSlider.noUiSlider.on('update', function (values, handle) {
            inputsRange[handle].value = values[handle];
        });


        inputsRange.forEach(function (input, handle) {

            input.addEventListener('change', function () {
                stepsSlider.noUiSlider.setHandle(handle, this.value);
            });

            btnAccept.addEventListener('click', () => {
                stepsSlider.noUiSlider.setHandle(handle, this.value);
            });

            input.addEventListener('keydown', function (e) {

                var values = stepsSlider.noUiSlider.get();
                var value = Number(values[handle]);

                // [[handle0_down, handle0_up], [handle1_down, handle1_up]]
                var steps = stepsSlider.noUiSlider.steps();

                // [down, up]
                var step = steps[handle];

                var position;

                // 13 is enter,
                // 38 is key up,
                // 40 is key down.


                switch (e.which) {

                    case 13:
                        stepsSlider.noUiSlider.setHandle(handle, this.value);
                        break;

                    case 38:

                        // Get step to go increase slider value (up)
                        position = step[1];

                        // false = no step is set
                        if (position === false) {
                            position = 1;
                        }

                        // null = edge of slider
                        if (position !== null) {
                            stepsSlider.noUiSlider.setHandle(handle, value + position);
                        }

                        break;

                    case 40:

                        position = step[0];

                        if (position === false) {
                            position = 1;
                        }

                        if (position !== null) {
                            stepsSlider.noUiSlider.setHandle(handle, value - position);
                        }

                        break;
                }
            });
        });
    }
}

createRangeSlider();


//range sliders

//toggling

let togglingSpan = [...document.querySelectorAll('.toggling > span')];

function toggleVis() {
    if (togglingSpan.length) {
        togglingSpan.forEach((btn) => {
            btn.addEventListener('click', () => {
                btn.closest('.toggling').classList.toggle('open');
            })
        })
    }
}

toggleVis();
//toggling

//filter control

let filterOpener = [...document.querySelectorAll('.filter-opener')];

function controlingOpeningFilter() {
    if (filterOpener.length) {
        let filt = document.querySelector('.filter-container');

        filterOpener.forEach((btn) => {

            if (window.innerWidth < 920) {
                btn.addEventListener('click', () => {
                    filt.classList.toggle('open');
                    document.body.classList.toggle('filter-open');
                    document.body.classList.toggle('no-scroll');
                });
            }

        });
        filt.querySelector('.cls').addEventListener('click', () => {
            filt.classList.remove('open');
            document.body.classList.remove('filter-open');
            document.body.classList.remove('no-scroll');
        })
    }
}

controlingOpeningFilter();
//filter control

let fn = {
    async ajax(data, type = 'json', method = 'POST', url = '/index.php') {
        let response = await fetch(url, {
            headers: {
                'X-Requested-With': 'fetch',
            },
            method: method,
            body: data
        });

        switch (type) {
            case 'json':
                return await response.json();
            case 'text':
                return await response.text();
            case 'formData':
                return await response.formData();
            case 'blob':
                return await response.blob();
            case 'arrayBuffer':
                return await response.arrayBuffer();
        }
    },

    ajaxModule(sModule, sMethod, data, actionQuery, type = 'json', method = 'POST') {
        return fn.ajax(fn.ajaxFD(sModule, sMethod, data, actionQuery), type, method);
    },

    ajaxFD: function (sModule, sMethod, data = null, sActionQuery = null) {
        if (!data) data = new FormData;
        data.set('app', 'ajax');
        data.set('c', sModule);
        data.set('m', sMethod);
        if (sActionQuery) {
            data.set('act', sActionQuery);
        }
        return data;
    },
    modalOpen(mod) {
        document.body.classList.add('no-scroll');

        mod.classList.add('visible');
        if (mod.querySelector('.main-title')) {
            setTimeout(() => {
                mod.querySelector('.main-title').classList.add('done');

            }, 500);
        }
    },
    showFormError(r, form) {
        let isFirstEl = true, firstEL = null;
        let errAlert = [];
        for (let fld of r.fields) {
            let inp;
            if (form) {
                inp = form.querySelector('[name=' + fld + ']');
            } else {
                inp = document.querySelector('[name=' + fld + ']');
            }
            if (inp) {
                if (isFirstEl) {
                    firstEL = inp;
                    isFirstEl = false;
                }
                // inp.classList.add('error');
                elMsg = inp.parentElement.querySelector('.error-message');
                if (elMsg) {
                    elMsg.innerHTML = r.errors[fld];
                    setTimeout(() => {
                        inp.setAttribute('aria-invalid', '');
                    });
                }
            }
        }
        if (firstEL) firstEL.focus();
        for (let k in r.errors) {
            if (!r.fields.includes(k)) errAlert.push(r.errors[k]);
        }
        if (errAlert.length > 0) {
            fn.alert('Помилка!', errAlert.join("<br>"));
        }
    },
    clearFormError(form) {
        for (let el of form) {
            el.removeAttribute('aria-invalid');
            elMsg = el.parentElement.querySelector('.error-message');
            if (elMsg) {
                elMsg.innerHTML = '';
            }
        }
    },
    redirect(url) {
        location.href = url;
    },
    alert(title, message) {
        const w = document.getElementById('js-alert-window');
        const t = w.querySelector('.js-title');
        const m = w.querySelector('.js-message');
        setTimeout(() => {
            t.innerHTML = title;
            m.innerHTML = message;
        });
        w.classList.add(MODAL_OPEN_CLASS);
    }
}


function redirectSelectElement(idSelect) {
    let sel = document.getElementById(idSelect);
    if (!sel) return;
    location = sel.value;
}

function Basket() {
    let elTotalAmount = document.getElementById('js-basket-total-amount');
    let elTotalQuantity = document.getElementById('js-basket-total-quantity');

    this.add = function (goodID, idQuantity, items) {
        const el = document.getElementById(idQuantity);
        if (!el) return;
        let d = new FormData();
        let quantity = el.value;
        d.set('goodID', goodID);
        d.set('quantity', quantity);
        fn.ajaxModule('basket', 'addGood', d).then(r => {
            r.data.popup
            if (!r.data.errors) {
                setTotal(r.data.amount, r.data.quantity);
                footer = document.querySelector('footer');
                footer.insertAdjacentHTML('afterend', r.data.popup);
                items = JSON.parse(items);
                items[0]['quantity'] = quantity;
                ga4.add_to_cart(items);
                setTimeout(() => {
                    fn.modalOpen(document.getElementById('js-basket-window'));
                });
            }
        });
    };

    this.plusMinus = function (goodID, quantity, el, changeInpVal = false, items) {
        const elQuantity = el.closest('.quantity-field').querySelector('[name=quantity]');
        if (quantity == -1) {
            if (elQuantity.value < 2) return;
        }
        if (changeInpVal) {
            let elTotalGoodAmount = document.getElementById('js-total-good-amount');
            elQuantity.value = Number(elQuantity.value) + quantity;
            if (elTotalGoodAmount) {
                elTotalGoodAmount.innerText = (Number(elQuantity.value) * Number(elTotalGoodAmount.dataset.price)) + ' ' + elTotalGoodAmount.dataset.currency;
            }
        }
        let d = new FormData();
        d.set('goodID', goodID);
        d.set('quantity', quantity);
        fn.ajaxModule('basket', 'plusMinus', d).then(r => {
            if (!r.errors) {
                setTotal(r.data.amount, r.data.quantity);
                items = JSON.parse(items);
                items[0]['quantity'] = elQuantity.value;
                ga4.add_to_cart(items);
            }
        });
    }

    this.del = function (goodID, el, items) {
        let d = new FormData();
        d.set('goodID', goodID);
        fn.ajaxModule('basket', 'delGood', d).then(r => {
            el.closest('.checkout-item').remove();
            setTotal(r.data.amount, r.data.quantity);
            ga4.remove_from_cart(items);
        });
    }

    function setTotal(amount, quantity) {
        elTotalQuantity.innerText = quantity;
        if (elTotalAmount) {
            elTotalAmount.innerText = amount;
        }
    }
}


function Checkout() {
    this.send = function (form, ga4data) {
        fn.clearFormError(form);
        let d = new FormData(form);
        fn.ajaxModule('basket', 'toCheck', d).then(r => {
            if (r.success) {
                const modal = document.getElementById('js-order-success');
                const elTitle = document.getElementById('js-order-title');
                const elMessage = document.getElementById('js-order-message');
                if (r.data.title) {
                    elTitle.innerHTML = r.data.title;
                }
                if (r.data.message) {
                    elMessage.innerHTML = r.data.message;
                }
                setTimeout(() => {
                    modal.classList.add(MODAL_OPEN_CLASS);
                });
                ga4.purchase(ga4data, r.data.order_id);
            } else {
                fn.showFormError(r);
            }
        });
    }
}


function Search() {
    const inp = document.getElementById('js-search-inp');
    const btn = document.getElementById('js-search-btn');
    const ul = document.getElementById('js-search-ul');
    const wrap = document.querySelector('.js-search-field-wrap');
    if (!inp) return;
    document.addEventListener('click', (ev) => {
        if (!ev.composedPath().includes(wrap)) {
            ul.innerHTML = '';
            inp.value = '';
        }
    });
    inp.addEventListener('keyup', function (ev) {
        let searchText = this.value;
        if (searchText.length < 3) return;
        let d = new FormData();
        d.set('code', searchText);
        fn.ajaxModule('goods', 'searchHint', d).then(r => {
            ul.innerHTML = '';
            if (r.data && r.data.length > 0) {
                for (let v of r.data) {
                    let li = document.createElement('li');
                    li.innerHTML = v.code + ' - ' + v.name;
                    li.onclick = () => {
                        inp.value = v.code + ' - ' + v.name;
                        fn.redirect(v.url);
                        // btn.dataset.code = v.code;
                        ul.innerHTML = '';
                    }
                    ul.append(li);
                }
            }
        });
    });

    // btn.addEventListener('click', () => {
    //    let code = btn.dataset.code;
    //    let d = new FormData();
    //    d.set('code', code);
    //    fn.ajaxModule('goods', 'search', d).then(r => {
    //       if (!r.errors) {
    //          fn.redirect(r.data.url);
    //       } else {
    //          fn.alert("Пошук запчастин", r.errors[0]);
    //       }
    //    });
    // });
}

new Search();

function showMoreProducts(filter, sort, btn) {
    const wrap = document.getElementById('js-catalog-list-wrap');
    let aItems = wrap.getElementsByClassName('catalog-item');
    let d = new FormData();
    d.set('filter', filter);
    d.set('sort', sort);
    d.set('offset', aItems.length);
    fn.ajaxModule('goods', 'showMoreProducts', d).then(r => {
        wrap.insertAdjacentHTML('beforeend', r.data.html);
        if (!r.data.btn) btn.style.display = 'none';
    });
}

function setCategoryForModel(el, selCategory) {
    const modelID = el.value;
    const elCategory = document.getElementById(selCategory);
    let categoryID = elCategory.value;
    let d = new FormData();
    d.set('modelID', modelID);
    fn.ajaxModule('goods', 'getCategoryForModel', d).then(r => {
        if (!r.errors) {
            new Promise((resolve) => {
                elCategory.innerHTML = r.data.options;
                resolve();
            }).then(() => {
                elCategory.value = categoryID;
            })
        }
    });
}

function setModelForCategory(el, selModel) {
    const categoryID = el.value;
    const elModel = document.getElementById(selModel);
    let modelID = elModel.value;
    let d = new FormData();
    d.set('categoryID', categoryID);
    fn.ajaxModule('goods', 'getModelForCategory', d).then(r => {
        if (!r.errors) {
            new Promise((resolve) => {
                elModel.innerHTML = r.data.options;
                resolve();
            }).then(() => {
                elModel.value = modelID;
            })
        }
    });
}

function NewPost(selCity, selDepartment, selDepartDropdown, cellbackNoDepartament = null, wrapAttr = {}) {
    let elCity = document.querySelector(selCity);
    let wrap = null, ul, departmentData = null;
    let elDepartment = document.querySelector(selDepartment);
    const elDepartDropdown = document.querySelector(selDepartDropdown);
    const elDepartSearch = document.querySelector('.js-search');
    const elDepartList = document.querySelector('.js-list');
    const self = this;

    if (!elCity || !elDepartment || !elDepartDropdown || !elDepartSearch || !elDepartList) return;

    this.clear = function () {
        elCity.value = elDepartSearch.value = '';
        elDepartment.setAttribute('value', '');
        elDepartList.innerHTML = '';
        hideDropdown();
    }

    hideDropdown();

    elDepartment.addEventListener('click', () => {
        if (elDepartList.innerHTML == '') return;
        if (elDepartDropdown.style.display == 'block') {
            hideDropdown();
        } else {
            showDropdown();
        }
    });

    elDepartSearch.addEventListener('input', function () {
        let data = [];
        if (departmentData && departmentData.length > 0) {
            for (let v of departmentData) {
                let str = v.Description.toLowerCase();
                if (str.includes(this.value.toLowerCase())) {
                    data.push(v);
                }
            }
        }
        if (data.length > 0) {
            setDepartment(data);
        } else setDepartment(null);
    });

    if (!wrap) {
        wrap = document.createElement('div');
        elCity.parentElement.insertBefore(wrap, elCity);
        for (let k in wrapAttr) wrap.setAttribute(k, wrapAttr[k]);
        wrap.append(elCity);
    }

    elCity.addEventListener('keyup', function (ev) {
        let city = this.value;
        if (city.length < 3) return;
        getCity(city);
    });

    function hideDropdown() {
        elDepartDropdown.style.display = 'none';
    }

    function showDropdown() {
        elDepartDropdown.style.display = 'block';
        elDepartSearch.focus();
    }

    elCity.addEventListener('focus', function () {
        self.clear();
    });

    function getCity(city) {
        let data = JSON.stringify({
            "modelName": "Address",
            "calledMethod": "searchSettlements",
            "methodProperties": {
                "CityName": city,
                "Limit": 300
            },
            "apiKey": "99034bd321853a86cd7ec5b1db32b762"
        });

        ajax(data).then(r => {
            if (r.success) {
                if (ul) ul.remove();
                ul = document.createElement('ul');
                for (let city of r.data[0].Addresses) {
                    let li = document.createElement('li');
                    li.innerText = city.Present;
                    li.onclick = function () {
                        elCity.value = city.Present;
                        getDepartment(city.DeliveryCity);
                        ul.remove();
                    }
                    ul.append(li);
                }
                wrap.append(ul);
            }
        });
    }

    function getDepartment(cityRef) {
        let data = new FormData;
        data.set('cityRef', cityRef);
        ajax(data, '/public/new_post/get_department_by_city.php').then(r => {
            if (r.success) {
                if (r.data.length > 0) {
                    setDepartment(r.data);
                    departmentData = r.data;
                } else {
                    if (typeof cellbackNoDepartament === 'function') cellbackNoDepartament();
                }
            }
        });
    }

    function setDepartment(data) {
        elDepartList.innerHTML = '';
        if (!data) {
            return;
        }
        for (let d of data) {
            let li = document.createElement('li');
            li.dataset.value = d.Description;
            li.innerText = d.Description;
            li.onclick = function () {
                elDepartment.setAttribute('value', this.dataset.value);
                let aLi = elDepartList.getElementsByTagName('LI');
                if (aLi.length > 0) {
                    for (let li of aLi) {
                        li.classList.remove('active');
                    }
                }
                this.classList.add('active');
                hideDropdown();
            }
            elDepartList.append(li);
        }
        showDropdown();
    }

    async function ajax(data, url = 'https://api.novaposhta.ua/v2.0/json/') {
        let response = await fetch(url, {
            method: 'POST',
            body: data
        });
        return await response.json();
    }
}

function deliverySelect() {
    let delBtn = document.getElementsByClassName('js-delivery_id');
    const elNewPost = document.getElementById('js-new-post-delivery');
    const elCourier = document.getElementById('js-courier-delivery');
    if (delBtn.length == 0 || !elNewPost) return;
    for (let btn of delBtn) {
        btn.addEventListener('click', function () {
            switch (+this.dataset.method) {
                case 1: // самовивіз
                    elNewPost.style.display = 'none';
                    elCourier.style.display = 'none';
                    break;
                case 2: // нова прошта
                    elNewPost.style.display = 'block';
                    elCourier.style.display = 'none';
                    break;
                case 3: // кур'ером
                    elNewPost.style.display = 'none';
                    elCourier.style.display = 'block';
                    break;
            }
        });
    }
}

deliverySelect();

function showGroupParts() {
    const sel = document.getElementById('js-group-parts-select');
    const btn = document.getElementById('js-group-parts-button');
    if (!sel || !btn) return;
    btn.addEventListener('click', () => {
        let path = sel.value;
        if (!path) {
            fn.alert('Запчастини', 'Виберіть, будь ласка, групу запчастин');
            return;
        }
        fn.redirect(path);
    });
}

showGroupParts();

function orderACallback(form) {
    fn.clearFormError(form);
    let d = new FormData(form);
    fn.ajaxModule('contacts', 'orderACallback', d).then(r => {
        if (r.success) {
            const succes = document.getElementById('js-order-a-callback-succes');
            const formWr = document.getElementById('js-order-a-callback-form');
            const modal = formWr.closest('.modal-window');
            formWr.style.display = 'none';
            succes.style.display = 'block';
            setTimeout(() => {
                fn.clearFormError(form);
                form.name.value = form.phone.value = '';
                formWr.style.display = 'block';
                succes.style.display = 'none';
                modal.classList.remove('visible');
            }, 5000);
        } else {
            fn.showFormError(r, form);
        }
    });
}

let ga4 = {
    view_item(items) {
        if (typeof items === 'string') items = JSON.parse(items);
        dataLayer.push({ecommerce: null});
        dataLayer.push({
            event: "view_item",
            ecommerce: {
                items: items
            }
        });

    },

    add_to_cart(items) {
        if (typeof items === 'string') items = JSON.parse(items);
        dataLayer.push({ecommerce: null});
        dataLayer.push({
            event: "add_to_cart",
            ecommerce: {
                items: items
            }
        });
    },

    remove_from_cart(items) {
        if (typeof items === 'string') items = JSON.parse(items);
        dataLayer.push({ecommerce: null});
        dataLayer.push({
            event: "remove_from_cart",
            ecommerce: {
                items: items
            }
        });
    },

    begin_checkout(items) {
        if (typeof items === 'string') items = JSON.parse(items);
        dataLayer.push({ecommerce: null});
        dataLayer.push({
            event: "begin_checkout",
            ecommerce: {
                items: items
            }
        });
    },

    purchase(data, transaction_id) {
        if (typeof data === 'string') data = JSON.parse(data);
        dataLayer.push({ecommerce: null});
        dataLayer.push({
            event: "purchase",
            ecommerce: {
                transaction_id: transaction_id, // Номер заказа
                affiliation: 'cart', // Значение
                value: data.amount, // Сума заказа, разделитель десятичных - точка
                tax: "0",
                shipping: "0",
                currency: "UAH",
                items: data.items
            }
        });
    }
};



